/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visual;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import modelos.Persona;
import modelos.SistemaMeteorologico;

public class VentanaPrincipal extends javax.swing.JFrame {

    private SistemaMeteorologico sistemaMeteorologico;
    public ArrayList<Persona> personas;
    
    public VentanaPrincipal() {
        sistemaMeteorologico = new SistemaMeteorologico();
        personas = new ArrayList<>();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("INGRESO DE PERSONAS PARA SISTEMA DE NOTIFICACION METEOROLOGICA");

        jLabel1.setText("CODIGO");

        jLabel2.setText("NOMBRE");

        jLabel3.setText("SUSCRITO");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "no", "si" }));

        jButton1.setText("CREAR");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("BUSCAR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("SISTEMA METEOROLOGICO");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("MODIFICAR");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGap(36, 36, 36)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextField1)
                            .addComponent(jTextField2)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(18, 18, 18)
                .addComponent(jButton3)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (personas.size() < 3) {
            String codigo = jTextField1.getText();
            String nombre = jTextField2.getText();
            boolean suscrito = jComboBox1.getSelectedItem().toString().equals("si");
            Persona persona = new Persona(codigo, nombre, suscrito);
            personas.add(persona);
            if (suscrito) {
                sistemaMeteorologico.addObserver(persona);
                }
        JOptionPane.showMessageDialog(null, "Persona creada: " + nombre);
        } else {
            JOptionPane.showMessageDialog(null, "Ya se ha alcanzado el límite de 3 personas.");
        }
       // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new Notificaciones(personas, sistemaMeteorologico).setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // Solicitar el código de la persona a buscar
        String codigo = JOptionPane.showInputDialog("Ingrese el nombre de la persona a buscar:");
        Persona persona = buscarPersonaPorNombre(codigo);

        if (persona != null) {
            // Solicitar los nuevos valores secuencialmente
            String nuevoCodigo = JOptionPane.showInputDialog("Ingrese el nuevo código:", persona.getCodigo());
            String nuevoNombre = JOptionPane.showInputDialog("Ingrese el nuevo nombre:", persona.getNombre());
            int suscripcion = JOptionPane.showConfirmDialog(null, 
                    "¿Desea suscribir a esta persona?", 
                    "Estado de Suscripción", 
                    JOptionPane.YES_NO_OPTION);
            boolean suscrito = (suscripcion == JOptionPane.YES_OPTION);
            boolean estabaSuscrito = persona.isSuscrito();

            // Actualizar los datos de la persona
            persona.setCodigo(nuevoCodigo);
            persona.setNombre(nuevoNombre);
            persona.setSuscrito(suscrito);

            // Actualizar en el sistema de observadores si hay un cambio en la suscripción
            if (suscrito && !estabaSuscrito) {
                sistemaMeteorologico.addObserver(persona);
            } else if (!suscrito && estabaSuscrito) {
                sistemaMeteorologico.removeObserver(persona);
            }

            JOptionPane.showMessageDialog(null, "Persona actualizada: " + persona.getNombre());
        } else {
            JOptionPane.showMessageDialog(null, "No existe la persona con el código: " + codigo);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        String nombre = JOptionPane.showInputDialog("Ingrese el nombre de la persona a buscar:");
        
        if (nombre != null && !nombre.trim().isEmpty()) { // Verifica que no esté vacío o cancelado
            Persona persona = buscarPersonaPorNombre(nombre.trim());

            if (persona != null) {
                JOptionPane.showMessageDialog(null, "Persona encontrada: " + persona.getNombre() + 
                    ", Código: " + persona.getCodigo() + ", Suscrito: " + persona.isSuscrito() );
            } else {
                JOptionPane.showMessageDialog(null, "No existe la persona con el nombre: " + nombre);
            }
        } else {
            JOptionPane.showMessageDialog(null, "El nombre no puede estar vacío.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private Persona buscarPersonaPorNombre(String nombre) {
    for (Persona persona : personas) {
        if (persona.getNombre().equalsIgnoreCase(nombre)) {
            return persona;
        }
    }
    return null; // Retorna null si la persona no existe
}
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
